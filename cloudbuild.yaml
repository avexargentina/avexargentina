steps:
  # Paso 1: Construir imagen personalizada de Traccar con Cloud SQL Proxy
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-traccar-image'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/${PROJECT_ID}/traccar-cloudsql:latest'
      - '.'

  # Paso 2: Subir imagen al Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-traccar-image'
    args:
      - 'push'
      - 'gcr.io/${PROJECT_ID}/traccar-cloudsql:latest'
    waitFor: ['build-traccar-image']

  # Paso 3: Crear instancia de Compute Engine para Traccar
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    id: 'create-vm'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Verificar si la VM ya existe
        if gcloud compute instances describe traccar-server --zone=us-central1-a --project=${PROJECT_ID} >/dev/null 2>&1; then
          echo "VM traccar-server ya existe, saltando creación..."
        else
          echo "Creando VM traccar-server..."
          gcloud compute instances create traccar-server \
            --zone=us-central1-a \
            --machine-type=e2-standard-2 \
            --subnet=default \
            --network-tier=PREMIUM \
            --maintenance-policy=MIGRATE \
            --scopes=https://www.googleapis.com/auth/cloud-platform \
            --tags=traccar-server,http-server,https-server \
            --image=ubuntu-2004-focal-v20231213 \
            --image-project=ubuntu-os-cloud \
            --boot-disk-size=30GB \
            --boot-disk-type=pd-standard \
            --project=${PROJECT_ID}
        fi

  # Paso 4: Configurar reglas de firewall
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    id: 'setup-firewall'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Crear regla de firewall para Traccar si no existe
        if ! gcloud compute firewall-rules describe allow-traccar --project=${PROJECT_ID} >/dev/null 2>&1; then
          echo "Creando regla de firewall para Traccar..."
          gcloud compute firewall-rules create allow-traccar \
            --allow tcp:8080,tcp:5001-5050,udp:5001-5050 \
            --source-ranges=0.0.0.0/0 \
            --target-tags=traccar-server \
            --description="Permite acceso a Traccar web y protocolos GPS" \
            --project=${PROJECT_ID}
        else
          echo "Regla de firewall allow-traccar ya existe, saltando..."
        fi

  # Paso 5: Esperar a que la VM esté lista
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    id: 'wait-vm-ready'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Esperando a que la VM esté lista..."
        sleep 30
        
        # Verificar que la VM esté corriendo
        while true; do
          STATUS=$(gcloud compute instances describe traccar-server --zone=us-central1-a --format="value(status)" --project=${PROJECT_ID})
          if [ "$STATUS" = "RUNNING" ]; then
            echo "VM está corriendo"
            break
          fi
          echo "VM estado: $STATUS, esperando..."
          sleep 10
        done
    waitFor: ['create-vm']

  # Paso 6: Configurar la VM con Docker y desplegar Traccar
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    id: 'deploy-traccar'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Configurando Traccar en la VM..."
        
        # Configurar la VM mediante SSH
        gcloud compute ssh traccar-server \
          --zone=us-central1-a \
          --project=${PROJECT_ID} \
          --ssh-flag="-o UserKnownHostsFile=/dev/null" \
          --ssh-flag="-o CheckHostIP=no" \
          --ssh-flag="-o StrictHostKeyChecking=no" \
          --command="
            # Actualizar sistema
            sudo apt-get update -y
            
            # Instalar Docker
            if ! command -v docker &> /dev/null; then
              echo 'Instalando Docker...'
              sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
              echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable' | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update -y
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker \$USER
            else
              echo 'Docker ya está instalado'
            fi
            
            # Configurar autenticación con Container Registry
            gcloud auth configure-docker --quiet
            
            # Crear directorio para Traccar
            mkdir -p ~/traccar/logs
            cd ~/traccar
            
            # Crear docker-compose.yml
            cat > docker-compose.yml << 'COMPOSE_EOF'
version: '3.8'
services:
  traccar:
    image: gcr.io/${PROJECT_ID}/traccar-cloudsql:latest
    container_name: traccar
    hostname: traccar
    restart: unless-stopped
    ports:
      - \"8080:8080\"
      - \"5001-5050:5001-5050\"
      - \"5001-5050:5001-5050/udp\"
    volumes:
      - ./logs:/opt/traccar/logs
      - traccar_data:/opt/traccar/data
    environment:
      - JAVA_OPTS=-Xms1g -Xmx2g
      - GOOGLE_APPLICATION_CREDENTIALS=/tmp/key.json
    healthcheck:
      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8080\"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

volumes:
  traccar_data:
    driver: local
COMPOSE_EOF
            
            # Descargar la imagen personalizada
            echo 'Descargando imagen personalizada de Traccar...'
            sudo docker pull gcr.io/${PROJECT_ID}/traccar-cloudsql:latest
            
            # Iniciar Traccar
            echo 'Iniciando Traccar...'
            sudo docker-compose down || true
            sudo docker-compose up -d
            
            # Verificar que esté corriendo
            sleep 60
            sudo docker-compose ps
            sudo docker logs traccar --tail 30
            
            echo 'Configuración de Traccar completada!'
          "
    waitFor: ['wait-vm-ready', 'setup-firewall', 'push-traccar-image']

  # Paso 7: Verificar despliegue y mostrar información
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:latest'
    id: 'verify-deployment'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Verificando despliegue..."
        
        # Obtener IP pública de la VM
        VM_IP=$(gcloud compute instances describe traccar-server --zone=us-central1-a --format="value(networkInterfaces[0].accessConfigs[0].natIP)" --project=${PROJECT_ID})
        
        echo "======================================"
        echo "🎉 DESPLIEGUE COMPLETADO CON ÉXITO!"
        echo "======================================"
        echo ""
        echo "📊 Información del despliegue:"
        echo "   • IP pública de la VM: $VM_IP"
        echo "   • URL de Traccar: http://$VM_IP:8080"
        echo "   • Usuario por defecto: admin"
        echo "   • Contraseña por defecto: admin"
        echo ""
        echo "🔗 Base de datos Cloud SQL:"
        echo "   • Instancia: traccar-db-mysql"
        echo "   • Connection Name: ${PROJECT_ID}:us-central1:traccar-db-mysql"
        echo "   • Base de datos: traccar"
        echo "   • Usuario: traccar_user"
        echo ""
        echo "⚠️  IMPORTANTE:"
        echo "   • Cambia la contraseña del usuario admin inmediatamente"
        echo "   • Los datos se persisten en Cloud SQL"
        echo "   • Puertos GPS habilitados: 5001-5050 (TCP/UDP)"
        echo "   • Puerto web: 8080 (no 8082)"
        echo ""
        echo "🔍 Para verificar el estado:"
        echo "   gcloud compute ssh traccar-server --zone=us-central1-a --command='sudo docker-compose ps'"
    waitFor: ['deploy-traccar']

# Opciones de Cloud Build
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  
# Timeout total del build
timeout: '1800s'

# Sustituciones (variables)
substitutions:
  _ZONE: 'us-central1-a'
  _MACHINE_TYPE: 'e2-standard-2'
